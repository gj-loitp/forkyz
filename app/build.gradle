apply plugin: 'com.android.application'
apply plugin: 'checkstyle'

check.dependsOn 'checkstyle'

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    source 'src'
    include '**/*.java'
    exclude '**/build/**'

    classpath = files()
}

repositories {
    google()
}

android {
    Properties props = new Properties()

    def propsPath = System.getProperty("user.home") + "/androidkeyinfo.properties"

    if (new File(propsPath).exists())
        props.load(new FileInputStream(propsPath))

    compileSdkVersion 33

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        applicationId "app.crossword.yourealwaysbe.forkyz"
        namespace "app.crossword.yourealwaysbe.forkyz"
        minSdkVersion 14
        targetSdkVersion 33
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        multiDexEnabled true
        vectorDrawables {
            useSupportLibrary true
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                    "room.schemaLocation": "$projectDir/schemas".toString()
                ]
            }
        }
     }

    compileOptions.with {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        if (file(System.getProperty("user.home") + "/androidkeystore").exists()) {
            debugSigned {
                storeFile file(System.getProperty("user.home") + "/androidkeystore")
                storePassword props.getProperty("storePassword")
                keyAlias "key_alias"
                keyPassword props.getProperty("keyPassword")
            }
        }
        release {
            storeFile file(System.getProperty("user.home") + "/androidkeystore")
            storePassword props.getProperty("storePassword")
            keyAlias "key_alias"
            keyPassword props.getProperty("keyPassword")
        }
    }

    buildTypes {
        debug {
        }
        if (file(System.getProperty("user.home") + "/androidkeystore").exists()) {
            debugSigned {
                signingConfig signingConfigs.debugSigned
            }
        }
        if (file(System.getProperty("user.home") + "/androidkeystore").exists()) {
            release {
                signingConfig signingConfigs.release
                minifyEnabled true
                proguardFile file('src/main/assemble/proguard-android.txt')
            }
        }
    }

    tasks.withType(JavaCompile) {
        configure(options) {
            // -processing as adding room annotation processor library
            // causes warnings about unprocessed annotations for an
            // unclear reason
            options.compilerArgs << '-Xlint:all' << '-Xlint:-processing'
        }
    }
}

dependencies {
    def lifecycle_version = "2.4.1"
    def room_version = "2.4.2"
    def work_version = "2.7.1"

    annotationProcessor "androidx.room:room-compiler:$room_version"
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.work:work-runtime:$work_version"
    implementation 'androidx.activity:activity:1.4.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.fragment:fragment:1.4.1'
    // refrain from preferences version 1.2.0 since it causes Kotlin conflicts
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'androidx.webkit:webkit:1.4.0'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'com.leinardi.android:speed-dial:3.3.0'
    implementation 'com.github.jgraham0325:words-to-numbers:8a97d258fd'
    implementation 'com.squareup:seismic:1.0.3'

    implementation project(path: ":puzlib", configuration: 'shadow')

    testImplementation "junit:junit:4.13.2"
    testImplementation "org.mockito:mockito-core:4.9.0"
    // thanks https://stackoverflow.com/a/30759769
    testImplementation 'org.json:json:20080701'
}

task prepareChrome {
    doLast {
        def slurp = new XmlSlurper().parse(file("src/main/AndroidManifest.xml"))
        def versionCode = slurp.'@android:versionCode'.text()
        def versionName = slurp.'@android:versionName'.text()
        copy {
            from("src/main/chrome") {
                include "**/*.json"
                include "**/*.html"
                filter {
                    it.replaceAll('@@versionCode@@', versionCode)
                            .replaceAll('@@versionName@@', versionName)
                }
            }
            into "build/chrome"
        }
        copy {
            from("src/main/chrome") {
                exclude "**/*.json"
                exclude "**/*.html"
            }
            into "build/chrome"
        }
    }
}

task assembleChrome {
    doLast {
        copy {
            from "build/outputs/apk/app-release.apk"
            into "build/chrome/vendor/chromium/crx"
        }
    }
}
tasks.assembleChrome.dependsOn "prepareChrome"
tasks.assembleChrome.dependsOn "assembleRelease"

task packageChrome(type: Zip) {
    from "build/chrome"
    archiveFileName = "forkyz-chrome.zip"
}
tasks.packageChrome.dependsOn assembleChrome

tasks.build.dependsOn packageChrome
